import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { MemoryRouter } from 'react-router-dom';
import EditProfile from './EditProfile';

const mockStore = configureStore([]);

describe('EditProfile Component', () => {
  let store;

  beforeEach(() => {
    // Setting up mock store with a valid currentUser
    store = mockStore({
      user: {
        currentUser: {
          _id: '1',
          username: 'testuser',
          email: 'testuser@example.com',
          description: 'This is a test user',
          profilePicture: 'https://example.com/testuser.jpg',
        },
        loading: false,
        error: false,
      },
    });
  });

  test('renders EditProfile and shows initial form values correctly', () => {
    render(
      <Provider store={store}>
        <MemoryRouter>
          <EditProfile />
        </MemoryRouter>
      </Provider>
    );

    expect(screen.getByText(/Edit Profile/i)).toBeInTheDocument();
    expect(screen.getByDisplayValue('testuser')).toBeInTheDocument();
    expect(screen.getByDisplayValue('testuser@example.com')).toBeInTheDocument();
    expect(screen.getByDisplayValue('This is a test user')).toBeInTheDocument();
    expect(screen.getByAltText('Profile')).toHaveAttribute('src', 'https://example.com/testuser.jpg');
  });

  test('updates form fields and submits successfully', () => {
    render(
      <Provider store={store}>
        <MemoryRouter>
          <EditProfile />
        </MemoryRouter>
      </Provider>
    );

    fireEvent.change(screen.getByLabelText(/Username/i), {
      target: { value: 'updateduser' },
    });
    fireEvent.change(screen.getByLabelText(/Email/i), {
      target: { value: 'updateduser@example.com' },
    });

    fireEvent.click(screen.getByText(/Save/i));

    // Assuming that an update success message appears
    expect(screen.getByText(/User is Updated successfully/i)).toBeInTheDocument();
  });

  test('handles image upload error due to file size', () => {
    render(
      <Provider store={store}>
        <MemoryRouter>
          <EditProfile />
        </MemoryRouter>
      </Provider>
    );

    // Simulate image selection with a file larger than 4 MB
    const file = new File(['test'], 'test.png', { size: 5 * 1024 * 1024, type: 'image/png' });

    fireEvent.change(screen.getByLabelText(/Edit/i), {
      target: { files: [file] },
    });

    expect(screen.getByText(/File size must be less than 4 MB./i)).toBeInTheDocument();
  });

  test('cancels editing and resets form fields', () => {
    render(
      <Provider store={store}>
        <MemoryRouter>
          <EditProfile />
        </MemoryRouter>
      </Provider>
    );

    fireEvent.change(screen.getByLabelText(/Username/i), {
      target: { value: 'newuser' },
    });

    fireEvent.click(screen.getByText(/Cancel/i));

    expect(screen.getByDisplayValue('testuser')).toBeInTheDocument();
  });

  test('deletes account successfully', () => {
    render(
      <Provider store={store}>
        <MemoryRouter>
          <EditProfile />
        </MemoryRouter>
      </Provider>
    );

    // Mocking window.confirm to always return true
    jest.spyOn(window, 'confirm').mockImplementation(() => true);

    fireEvent.click(screen.getByText(/Delete Account/i));

    // Assuming an alert appears for successful account deletion
    expect(window.confirm).toHaveBeenCalledWith('Are you sure you want to delete your account? This action cannot be undone.');
  });

  test('handles delete account cancellation', () => {
    render(
      <Provider store={store}>
        <MemoryRouter>
          <EditProfile />
        </MemoryRouter>
      </Provider>
    );

    // Mocking window.confirm to always return false
    jest.spyOn(window, 'confirm').mockImplementation(() => false);

    fireEvent.click(screen.getByText(/Delete Account/i));

    expect(window.confirm).toHaveBeenCalledWith('Are you sure you want to delete your account? This action cannot be undone.');
    // Ensure the component is still visible and account is not deleted
    expect(screen.getByText(/Edit Profile/i)).toBeInTheDocument();
  });
});
